[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Interest",
    "section": "",
    "text": "Hello everyone, I’m Sechang Kim. I’ve studied geography so far, and eager to investigate population studies in the spatial perspectives. Any contact or suggestion is welcomed."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Research Interest",
    "section": "Education",
    "text": "Education\n\nM.A., 2024, Dept. of Geography Education, Seoul National University\n\nAdvisor: Sang-Il Lee(Professor, Deparment of Geography, Seoul National University)\nThesis: A Study on Internal Migration Modeling based on the Spatial Demographic Perspective: Utilizing Cross-Classified Multilevel Model\nGPA: 4.25/4.3(4.46/4.5)\n\nB.A., 2022, Dept. of Geography Education, Seoul National University\n\nGPA: 3.90/4.3(4.10/4.5)\nHonors: Summa Cum Laude"
  },
  {
    "objectID": "index.html#careers",
    "href": "index.html#careers",
    "title": "Research Interest",
    "section": "Careers",
    "text": "Careers\n\nJune 2024 - Now : Assistant Manager, Center for Educational Research, Seoul National University\nFeb 2018 - Oct 2019 : Sergeant, Republic of Korea Army\n\nMOS: Terrain Analysis in Engineering(so-called “GIS Specialty”)"
  },
  {
    "objectID": "test_gwalkR.html",
    "href": "test_gwalkR.html",
    "title": "gwalkR",
    "section": "",
    "text": "library(GWalkR)\n\ndata(\"iris\")\ngwalkr(iris)"
  },
  {
    "objectID": "personal-experience.html",
    "href": "personal-experience.html",
    "title": "Personal Experience",
    "section": "",
    "text": "I’ve developed and taught various programs in secondary schools, often, but not always, using GIS with a demographic phenomenon. Here’s a brief overview of what I’ve designed and taught.\n\n\n\nIn Korean | 인구구조를 통한 지역 이해\nWhere | Garak High School, Seoul(서울 가락고등학교)\nWhen | Mar 2020, Mar 2021, Mar 2022, Mar 2023\n\n\n\n\n\nIn Korean | 커뮤니티 매핑으로 꿈꾸는 배리어프리 세상\nWhere\n\nBokjeong High School, Sungnam(성남 복정고등학교)\nHyundai High School, Seoul(서울 현대고등학교)\nSampyung Middle School, Sungnam(성남 삼평중학교)\n\nWhen\n\nJul 2024, Oct 2022, Oct 2023\nMay 2023, Dec 2023\nJul 2023"
  },
  {
    "objectID": "personal-experience.html#instructor",
    "href": "personal-experience.html#instructor",
    "title": "Personal Experience",
    "section": "",
    "text": "I’ve developed and taught various programs in secondary schools, often, but not always, using GIS with a demographic phenomenon. Here’s a brief overview of what I’ve designed and taught.\n\n\n\nIn Korean | 인구구조를 통한 지역 이해\nWhere | Garak High School, Seoul(서울 가락고등학교)\nWhen | Mar 2020, Mar 2021, Mar 2022, Mar 2023\n\n\n\n\n\nIn Korean | 커뮤니티 매핑으로 꿈꾸는 배리어프리 세상\nWhere\n\nBokjeong High School, Sungnam(성남 복정고등학교)\nHyundai High School, Seoul(서울 현대고등학교)\nSampyung Middle School, Sungnam(성남 삼평중학교)\n\nWhen\n\nJul 2024, Oct 2022, Oct 2023\nMay 2023, Dec 2023\nJul 2023"
  },
  {
    "objectID": "shinylive_trial.html",
    "href": "shinylive_trial.html",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??\n#| standalone: true\n#| viewerHeight: 800\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(DT)\nlibrary(readr)\n\npath &lt;- file.path(\"data\", \"wpp_2022.rds\")\ndata &lt;- read_rds(path)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  mainPanel(\n    dataTableOutput(\"popTrend\")\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  output$popTrend &lt;- renderDataTable({\n    data |&gt; head(10) |&gt; \n      DT::datatable()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "shinylive_trial.html#shinylive",
    "href": "shinylive_trial.html#shinylive",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??\n#| standalone: true\n#| viewerHeight: 800\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(DT)\nlibrary(readr)\n\npath &lt;- file.path(\"data\", \"wpp_2022.rds\")\ndata &lt;- read_rds(path)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  mainPanel(\n    dataTableOutput(\"popTrend\")\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  output$popTrend &lt;- renderDataTable({\n    data |&gt; head(10) |&gt; \n      DT::datatable()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "shinylive_trial2.html",
    "href": "shinylive_trial2.html",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??\n#| standalone: true\n#| viewerHeight: 800\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\n\npath &lt;- paste0(getwd(), \"/WPP_2022.rds\")\ndata &lt;- readr::read_rds(path)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"country\", \"Select a country:\",\n                  choices = unique(data$ISO3),\n                  selected = \"KOR\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"popTrend\")\n    )\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Filter data based on selected continent\n  countryData &lt;- reactive({\n    data |&gt; \n      filter(ISO3 == input$country)\n  })\n  \n  \n  # Generate the map output\n  output$popTrend &lt;- renderPlot({\n    ggplot(data = countryData(), aes(x=year, y=pop_jan_total)) +\n      geom_line()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 800\n\n#Define UI\nui &lt;- fluidPage(\n  tableOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session){\n  output$table &lt;- renderTable({data[1:10,]})\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "shinylive_trial2.html#shinylive",
    "href": "shinylive_trial2.html#shinylive",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??\n#| standalone: true\n#| viewerHeight: 800\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\n\npath &lt;- paste0(getwd(), \"/WPP_2022.rds\")\ndata &lt;- readr::read_rds(path)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"country\", \"Select a country:\",\n                  choices = unique(data$ISO3),\n                  selected = \"KOR\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"popTrend\")\n    )\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Filter data based on selected continent\n  countryData &lt;- reactive({\n    data |&gt; \n      filter(ISO3 == input$country)\n  })\n  \n  \n  # Generate the map output\n  output$popTrend &lt;- renderPlot({\n    ggplot(data = countryData(), aes(x=year, y=pop_jan_total)) +\n      geom_line()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 800\n\n#Define UI\nui &lt;- fluidPage(\n  tableOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session){\n  output$table &lt;- renderTable({data[1:10,]})\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "shinylive_trial3.html",
    "href": "shinylive_trial3.html",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??2\n\nlibrary(readr)\npath &lt;- file.path(\"data\", \"wpp_2022.rds\")\ndata &lt;- read_rds(path)\n\n#| standalone: true\n#| viewerHeight: 800\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"country\", \"Select a country:\",\n                  choices = unique(data$ISO3),\n                  selected = \"KOR\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"popTrend\")\n    )\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Filter data based on selected continent\n  countryData &lt;- reactive({\n    data |&gt; \n      filter(ISO3 == input$country)\n  })\n  \n  \n  # Generate the map output\n  output$popTrend &lt;- renderPlot({\n    ggplot(data = countryData(), aes(x=year, y=pop_jan_total)) +\n      geom_line()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 800\n\n#Define UI\nui &lt;- fluidPage(\n  tableOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session){\n  output$table &lt;- renderTable({data[1:10,]})\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "shinylive_trial3.html#shinylive",
    "href": "shinylive_trial3.html#shinylive",
    "title": "Shinylive test",
    "section": "",
    "text": "Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. 과연 될까??2\n\nlibrary(readr)\npath &lt;- file.path(\"data\", \"wpp_2022.rds\")\ndata &lt;- read_rds(path)\n\n#| standalone: true\n#| viewerHeight: 800\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\n\n# Define your ui and server code here\nui &lt;- fluidPage(\n  titlePanel(\"World Population Prospects\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"country\", \"Select a country:\",\n                  choices = unique(data$ISO3),\n                  selected = \"KOR\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"popTrend\")\n    )\n  )\n)\n\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Filter data based on selected continent\n  countryData &lt;- reactive({\n    data |&gt; \n      filter(ISO3 == input$country)\n  })\n  \n  \n  # Generate the map output\n  output$popTrend &lt;- renderPlot({\n    ggplot(data = countryData(), aes(x=year, y=pop_jan_total)) +\n      geom_line()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n#| standalone: true\n#| viewerHeight: 800\n\n#Define UI\nui &lt;- fluidPage(\n  tableOutput(\"table\")\n)\n\nserver &lt;- function(input, output, session){\n  output$table &lt;- renderTable({data[1:10,]})\n}\n\nshinyApp(ui, server)"
  }
]
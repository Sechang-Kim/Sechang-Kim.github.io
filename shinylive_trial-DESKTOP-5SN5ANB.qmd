---
title: "Shinylive test"
author: 김세창(교육종합연구원, 사회교육과 지리전공 석사)
format: html
filters:
  - shinylive
editor: visual
---

## Shinylive {.unnumbered}

Shinylive는 서버 없이 정적 웹페이지에서 Shiny를 작동하게끔 만들어주는 WASM 패키지이다. 여기서는 대륙을 선택하면, 해당 대륙 내 국가들의 TFR만 그려주는 간단한 웹 애플리케이션을 shinylive를 통해 구현해본다. *과연 될까??*

```{r}
library(shiny)
library(dplyr)
library(readr)
library(ggplot2)
library(spData)
library(sf)

data(world)
world <- st_as_sf(world)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 800

data(world)
world <- st_as_sf(world)

# Define your ui and server code here
ui <- fluidPage(
  titlePanel("World Population Prospects"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "continent",
        label = "Select a Continent:",
        choices = unique(world$continent),
        selected = "Asia")
    ),
    
    mainPanel(
      plotOutput(outputId = "continentMap")
    )
  )
)


# Define server logic
server <- function(input, output) {
  
  # Filter data based on selected continent
  continentData <- reactive({
    world |> 
      filter(continent == input$continent)
  })
  
  
  # Generate the map output
  output$continentMap <- renderPlot({
    ggplot(data = continentData()) +
      geom_bar(aes(fill = gdpPercap))
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 800

library(shiny)
library(bslib)
library(datasets)

# Data pre-processing ----
# Tweak the "am" variable to have nicer factor labels -- since this
# doesn't rely on any user inputs, we can do this once at startup
# and then use the value throughout the lifetime of the app
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))


# Define UI for miles per gallon app ----
ui <- page_sidebar(

  # App title ----
  title = "Miles Per Gallon",

  # Sidebar panel for inputs ----
  sidebar = sidebar(

    # Input: Selector for variable to plot against mpg ----
    selectInput(
      "variable",
      "Variable:",
      c(
        "Cylinders" = "cyl",
        "Transmission" = "am",
        "Gears" = "gear"
      )
    ),

    # Input: Checkbox for whether outliers should be included ----
    checkboxInput("outliers", "Show outliers", TRUE)
  ),

  # Output: Formatted text for caption ----
  h3(textOutput("caption")),

  # Output: Plot of the requested variable against mpg ----
  plotOutput("mpgPlot")
)

# Define server logic to plot various variables against mpg ----
server <- function(input, output) {

  # Compute the formula text ----
  # This is in a reactive expression since it is shared by the
  # output$caption and output$mpgPlot functions
  formulaText <- reactive({
    paste("mpg ~", input$variable)
  })

  # Return the formula text for printing as a caption ----
  output$caption <- renderText({
    formulaText()
  })

  # Generate a plot of the requested variable against mpg ----
  # and only exclude outliers if requested
  output$mpgPlot <- renderPlot({
    boxplot(
      as.formula(formulaText()),
      data = mpgData,
      outline = input$outliers,
      col = "#75AADB",
      pch = 19
    )
  })
}

# Create Shiny app ----
shinyApp(ui, server)
```
